clc;
clear;
close all;

% Constants
mass_satellite = 10.0;    % Mass of the satellite
inertia_satellite = 10.0; % Moment of inertia of the satellite
l1 = 1; l2 = 1;           % Link lengths
m1_hat = 5; m2_hat = 5;   % Initial adaptive mass estimates
Kp_end_effector = 100;    % End-effector proportional gain
Kd_end_effector = 50;     % End-effector damping gain
gamma = 0.1;              % Adaptation gain
thruster_force = 0.2;     % Thruster boost
boundary_limit = 10;      % Bounds for the simulation space

% Limits
q_limit = deg2rad(150);    % Maximum joint angle limit
dq_limit = deg2rad(50);    % Maximum joint velocity limit
omega_limit = 1;           % Maximum satellite angular velocity

% Simulation parameters
t_final = 100; dt = 0.1;
num_steps = t_final / dt;
time = 0:dt:t_final-dt; % Time vector

% Initial conditions: [x, y, theta, q1, q2, vx, vy, omega, dq1, dq2]
state = [0; 0; 0; deg2rad(30); deg2rad(-45); 0; 0; 0; 0; 0]; % Initial state

% Target position
target_position = [4; 4]; % 2D position
goal_tolerance = 0.1;

% Initialize History Arrays
state_history = zeros(length(state), num_steps);
x_tilde_history = zeros(2, num_steps); % End-effector error history
m1_hat_history = zeros(1, num_steps);  % Adaptive mass estimate for link 1
m2_hat_history = zeros(1, num_steps);  % Adaptive mass estimate for link 2

for i = 1:num_steps
    % Store state
    state_history(:, i) = state;

    % Extract current values
    position = state(1:2);
    phi = state(3); % Current orientation
    q1 = state(4); q2 = state(5);
    velocity = state(6:7);
    omega = state(8);
    dq1 = state(9); dq2 = state(10);

    % Compute current end-effector position using forward kinematics
    R = [cos(phi), -sin(phi); sin(phi), cos(phi)];
    p1 = position + R * [l1 * cos(q1); l1 * sin(q1)];
    end_effector = p1 + R * [l2 * cos(q1 + q2); l2 * sin(q1 + q2)];

    % Check if the end effector has reached the target
    if norm(end_effector - target_position) < goal_tolerance
        disp('End effector reached the target!');
        state_history = state_history(:, 1:i); % Trim unused steps
        x_tilde_history = x_tilde_history(:, 1:i); % Trim error history
        m1_hat_history = m1_hat_history(1:i); % Trim parameter history
        m2_hat_history = m2_hat_history(1:i); % Trim parameter history
        break;
    end

    % End-effector control
    x_tilde = end_effector - target_position; % Position error
    dx_tilde = R * ([l1 * -sin(q1), -l2 * sin(q1 + q2); l1 * cos(q1), l2 * cos(q1 + q2)] * [dq1; dq2]); % Velocity error
    x_tilde_history(:, i) = x_tilde; % Log position error

    % Jacobian matrix for the 2-link manipulator
    J = [
        -l1 * sin(q1) - l2 * sin(q1 + q2), -l2 * sin(q1 + q2);
        l1 * cos(q1) + l2 * cos(q1 + q2),  l2 * cos(q1 + q2)
    ];

    % Adaptive parameter update laws
    m1_hat_dot = -gamma * (x_tilde' * [l1 * cos(q1); 0]);
    m2_hat_dot = -gamma * (x_tilde' * [l2 * cos(q1 + q2); 0]);
    m1_hat = m1_hat + m1_hat_dot * dt;
    m2_hat = m2_hat + m2_hat_dot * dt;

    % Store adaptive parameter values
    m1_hat_history(i) = m1_hat;
    m2_hat_history(i) = m2_hat;

    % PD control for the manipulator in end-effector space
    tau_manipulator = -J' * (Kp_end_effector * x_tilde + Kd_end_effector * dx_tilde);

    % Dynamics of manipulator
    H11 = m1_hat * 0.5^2 + m2_hat * (l1^2 + l2^2) + 2 * m2_hat * l1 * l2 * cos(q2) + inertia_satellite;
    H22 = m2_hat * l2^2 + inertia_satellite;
    H12 = m2_hat * l1 * l2 * cos(q2);
    H = [H11, H12; H12, H22];

    % Velocity-dependent forces (Coriolis)
    h = -m2_hat * l1 * l2 * sin(q2);
    C = [h * dq2, h * (dq1 + dq2); -h * dq1, 0];

    % Joint accelerations
    ddq = H \ (tau_manipulator - C * [dq1; dq2]);

    % Update manipulator state
    dq1 = dq1 + ddq(1) * dt; q1 = q1 + dq1 * dt;
    dq2 = dq2 + ddq(2) * dt; q2 = q2 + dq2 * dt;

    % Update spacecraft dynamics
    domega_dt = sum(tau_manipulator) / inertia_satellite; % Reaction torque
    omega = omega + domega_dt * dt;
    phi = phi + omega * dt;

    % Thruster control
    position_error = target_position - position;
    thrust = thruster_force * position_error / max(norm(position_error), 1e-6);

    % Compute spacecraft translational dynamics
    dposition_dt = velocity;
    dvelocity_dt = thrust / mass_satellite;
    position = position + dposition_dt * dt;
    velocity = velocity + dvelocity_dt * dt;

    % Update state vector
    state = [position; phi; q1; q2; velocity; omega; dq1; dq2];
end

% Visualization
figure;
hold on;
axis equal;
xlim([-boundary_limit, boundary_limit]);
ylim([-boundary_limit, boundary_limit]);
title('Spacecraft and 2-Link Manipulator with Reaction Control');
xlabel('X Position');
ylabel('Y Position');

% Draw the target as a circle
viscircles(target_position', goal_tolerance, 'Color', 'r', 'LineWidth', 0.5);

% Define spacecraft and manipulator shapes
spacecraft_shape = [-0.5, -0.5; 0.5, -0.5; 0.5, 0.5; -0.5, 0.5]'; % Square spacecraft
link1 = [0, 0; l1, 0]';
link2 = [0, 0; l2, 0]';

% Create plots
h_spacecraft = fill(spacecraft_shape(1, :), spacecraft_shape(2, :), 'b');
h_link1 = plot([0, 0], [0, 0], 'k', 'LineWidth', 2); % Link 1
h_link2 = plot([0, 0], [0, 0], 'k', 'LineWidth', 2);

for k = 1:size(state_history, 2)
    % Extract states
    x = state_history(1, k);
    y = state_history(2, k);
    phi = state_history(3, k);
    q1 = state_history(4, k);
    q2 = state_history(5, k);

    % Rotate and translate spacecraft
    R = [cos(phi), -sin(phi); sin(phi), cos(phi)];
    rotated_spacecraft = R * spacecraft_shape;
    set(h_spacecraft, 'XData', rotated_spacecraft(1, :) + x, 'YData', rotated_spacecraft(2, :) + y);

    % Forward kinematics for manipulator
    p1 = [x; y] + R * [l1*cos(q1); l1*sin(q1)];
    p2 = p1 + R * [l2*cos(q1 + q2); l2*sin(q1 + q2)];
    set(h_link1, 'XData', [x, p1(1)], 'YData', [y, p1(2)]);
    set(h_link2, 'XData', [p1(1), p2(1)], 'YData', [p1(2), p2(2)]);

    pause(0.05); % Control animation speed
end
hold off;

% Adaptive parameter and error plots
figure;

% Adaptive parameter estimates
subplot(2, 1, 1);
plot(time(1:length(m1_hat_history)), m1_hat_history, 'r', 'LineWidth', 1.5);
hold on;
plot(time(1:length(m2_hat_history)), m2_hat_history, 'b', 'LineWidth', 1.5);
title('Adaptive Parameters Over Time');
xlabel('Time (s)');
ylabel('Parameter Value');
legend('m1\_hat', 'm2\_hat');
grid on;

% End-effector error
subplot(2, 1, 2);
plot(time(1:size(x_tilde_history, 2)), vecnorm(x_tilde_history, 2, 1), 'k', 'LineWidth', 1.5);
title('End-Effector Error Over Time');
xlabel('Time (s)');
ylabel('Error (m)');
grid on;

%%
clc;
clear;
close all;

% Constants
mass_satellite = 10.0;    % Mass of the satellite
inertia_satellite = 10.0; % Moment of inertia of the satellite
l1 = 1; l2 = 1;           % Link lengths
m1 = 5; m2 = 5;           % Link masses
thruster_penalty = 10;    % Penalty for thruster use in MPC
boundary_limit = 10;      % Bounds for the visualization space
goal_tolerance = 0.1;     % Goal tolerance for the end-effector

% Simulation parameters
t_final = 50; dt = 0.1;
horizon = 10; % MPC horizon
num_steps = t_final / dt;
time = 0:dt:t_final-dt; % Time vector

% Cost weights for MPC
Q = eye(2);   % Weight matrix for position error
R = eye(2);   % Weight matrix for control effort

% Initial conditions: [x, y, phi, q1, q2, vx, vy, omega, dq1, dq2]
state = [0; 0; 0; deg2rad(30); deg2rad(-45); 0; 0; 0; 0; 0]; % Initial state

% Target position
target_position = [4; 4];

% Data storage
state_history = zeros(length(state), num_steps);
x_tilde_history = zeros(2, num_steps); % End-effector position error
torque_history = zeros(2, num_steps); % Torques applied by MPC

% MPC parameters
u_init = zeros(2 * horizon, 1); % Initial guess for control inputs
lb = -10 * ones(2 * horizon, 1); % Lower bound for torques
ub = 10 * ones(2 * horizon, 1);  % Upper bound for torques

options = optimoptions('fmincon', 'Display', 'off', 'Algorithm', 'sqp');

% Visualization setup
figure;
hold on;
axis equal;
xlim([-boundary_limit, boundary_limit]);
ylim([-boundary_limit, boundary_limit]);
title('Spacecraft and 2-Link Manipulator with MPC');
xlabel('X Position');
ylabel('Y Position');

% Draw the target as a circle
viscircles(target_position', goal_tolerance, 'Color', 'r', 'LineWidth', 0.5);

% Define spacecraft and manipulator shapes
spacecraft_shape = [-0.5, -0.5; 0.5, -0.5; 0.5, 0.5; -0.5, 0.5]'; % Square spacecraft
link1 = [0, 0; l1, 0]';
link2 = [0, 0; l2, 0]';

% Create plots
h_spacecraft = fill(spacecraft_shape(1, :), spacecraft_shape(2, :), 'b');
h_link1 = plot([0, 0], [0, 0], 'k', 'LineWidth', 2); % Link 1
h_link2 = plot([0, 0], [0, 0], 'k', 'LineWidth', 2);

for i = 1:num_steps
    % Store state
    state_history(:, i) = state;

    % Compute current end-effector position
    q1 = state(4);
    q2 = state(5);
    x_end = l1 * cos(q1) + l2 * cos(q1 + q2);
    y_end = l1 * sin(q1) + l2 * sin(q1 + q2);
    x_tilde = [x_end; y_end] - target_position;
    x_tilde_history(:, i) = x_tilde; % Log position error

    % Define the MPC cost function
    cost_function = @(u) mpc_cost_coupled(u, state, horizon, target_position, Q, R, thruster_penalty, l1, l2, dt);

    % Solve MPC optimization problem
    [u_opt, ~] = fmincon(cost_function, u_init, [], [], [], [], lb, ub, [], options);

    % Extract optimal torque for the current step
    tau = u_opt(1:2);
    torque_history(:, i) = tau; % Log applied torques

    % Update state using dynamics
    state = update_dynamics(state, tau, dt, l1, l2, mass_satellite, inertia_satellite);

    % Extract states for visualization
    x = state(1); y = state(2);
    phi = state(3);
    q1 = state(4); q2 = state(5);

    % Rotate and translate spacecraft
    R = [cos(phi), -sin(phi); sin(phi), cos(phi)];
    rotated_spacecraft = R * spacecraft_shape;
    set(h_spacecraft, 'XData', rotated_spacecraft(1, :) + x, 'YData', rotated_spacecraft(2, :) + y);

    % Forward kinematics for manipulator
    p1 = [x; y] + R * [l1*cos(q1); l1*sin(q1)];
    p2 = p1 + R * [l2*cos(q1 + q2); l2*sin(q1 + q2)];
    set(h_link1, 'XData', [x, p1(1)], 'YData', [y, p1(2)]);
    set(h_link2, 'XData', [p1(1), p2(1)], 'YData', [p1(2), p2(2)]);

    pause(0.05); % Control animation speed
end
hold off;

% Parameter adaptation and error plots
figure;

% End-effector error over time
subplot(3, 1, 1);
plot(time(1:size(x_tilde_history, 2)), vecnorm(x_tilde_history, 2, 1), 'k', 'LineWidth', 1.5);
title('End-Effector Error Over Time');
xlabel('Time (s)');
ylabel('Error (m)');
grid on;

% Control effort (torques) over time
subplot(3, 1, 2);
plot(time(1:size(torque_history, 2)), torque_history(1, :), 'r', 'LineWidth', 1.5);
hold on;
plot(time(1:size(torque_history, 2)), torque_history(2, :), 'b', 'LineWidth', 1.5);
title('Control Effort Over Time');
xlabel('Time (s)');
ylabel('Torque (Nm)');
legend('Joint 1', 'Joint 2');
grid on;

% Spacecraft angular velocity and joint angles
subplot(3, 1, 3);
plot(time(1:size(state_history, 2)), rad2deg(state_history(8, :)), 'g', 'LineWidth', 1.5); % Spacecraft angular velocity
hold on;
plot(time(1:size(state_history, 2)), rad2deg(state_history(4, :)), 'm', 'LineWidth', 1.5); % Joint 1
plot(time(1:size(state_history, 2)), rad2deg(state_history(5, :)), 'c', 'LineWidth', 1.5); % Joint 2
title('State Evolution Over Time');
xlabel('Time (s)');
ylabel('Degrees / Degrees per second');
legend('\omega_{spacecraft} (deg/s)', 'q1 (deg)', 'q2 (deg)');
grid on;

% Function: mpc_cost_coupled
function J = mpc_cost_coupled(u, state, horizon, target, Q, R, thruster_penalty, l1, l2, dt)
    J = 0;
    state_horizon = state;

    for t = 1:horizon
        tau = u(2 * (t - 1) + 1:2 * t);

        % Compute the cost
        q1 = state_horizon(4);
        q2 = state_horizon(5);
        x_end = l1 * cos(q1) + l2 * cos(q1 + q2);
        y_end = l1 * sin(q1) + l2 * sin(q1 + q2);
        error = [x_end; y_end] - target;
        J = J + error' * Q * error + tau' * R * tau + thruster_penalty * norm(state_horizon(6:7));

        % Update the state for the next step
        state_horizon = update_dynamics(state_horizon, tau, dt, l1, l2, 10, 10);
    end
end

% Function: update_dynamics
function state = update_dynamics(state, tau, dt, l1, l2, m_sat, I_sat)
    % Extract current states
    q1 = state(4); q2 = state(5);
    dq1 = state(9); dq2 = state(10);

    % Compute manipulator dynamics
    H11 = 5 * l1^2 + 5 * l2^2 + 2 * 5 * l1 * l2 * cos(q2) + I_sat;
    H22 = 5 * l2^2 + I_sat;
    H12 = 5 * l1 * l2 * cos(q2);
    H = [H11, H12; H12, H22];
    h = -5 * l1 * l2 * sin(q2);
    C = [h * dq2, h * (dq1 + dq2); -h * dq1, 0];
    ddq = H \ (tau - C * [dq1; dq2]);

    % Update manipulator state
    dq1 = dq1 + ddq(1) * dt; q1 = q1 + dq1 * dt;
    dq2 = dq2 + ddq(2) * dt; q2 = q2 + dq2 * dt;

    % Spacecraft dynamics
    domega = -sum(tau) / I_sat;
    omega = state(8) + domega * dt;
    phi = state(3) + omega * dt;

    % Thruster control
    pos = state(1:2);
    vel = state(6:7);
    acc = -0.1 * pos / m_sat;
    vel = vel + acc * dt;
    pos = pos + vel * dt;

    % Update state
    state = [pos; phi; q1; q2; vel; omega; dq1; dq2];
end
